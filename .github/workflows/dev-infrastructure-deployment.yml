name: Dev Deploy Infrastructure

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  infrastructure:
    name: Infrastructure
    runs-on: ubuntu-latest
    environment:
      name: Dev
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: infrastructure
    env:
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_db_apply_immediately: ${{ vars.DB_APPLY_IMMEDIATELY }}
      TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
      TF_VAR_db_master_username: ${{ secrets.DB_MASTER_USERNAME }}
      TF_VAR_db_max_capacity: ${{ vars.DB_MAX_CAPACITY }}
      TF_VAR_db_min_capacity: ${{ vars.DB_MIN_CAPACITY }}
      TF_VAR_environment: ${{ vars.ENVIRONMENT }}
      TF_VAR_is_database_public: ${{ vars.IS_DATABASE_PUBLIC }}
      TF_VAR_vpc_cidr: ${{ vars.VPC_CIDR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev'
        run: terraform apply -auto-approve -input=false
